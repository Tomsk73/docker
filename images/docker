#!/bin/sh

DIR=$2
ACTION=$1
TAG="mallen/$DIR"
TAG_ROOT="mallen"

function sanity {
 if [ "$1" == "ui" ] || [ "$1"=="registry"  ]; then
   return
 fi
 if [ ! -d "$1" ]; then
   echo "image \"$1\" doesn't exist. exiting."
   exit 1
 fi
}

function remove_image_if_exists {
 if [ $( docker images | grep $1 | wc -l ) -gt 0 ]; then
   IID=`docker images | grep $1 | awk '{print $3}'`
   echo "[$1] Removing image $IID"
   docker rmi $IID
 fi
}

function remove_container_if_exists {
 if [ $( docker ps -a | grep $1 | wc -l ) -gt 0 ]; then
   # Remove the container
   CID=`docker ps -a | grep $1 | awk '{print $1}'`
   echo "[$1] Removing container $CID"
   docker rm $CID
 fi
}

function stop_container_if_running {
 if [ $( docker ps | grep $1 | wc -l ) -gt 0 ]; then
   # Stop the container first
   CID=`docker ps | grep $1 | awk '{print $1}'`
   echo "[$1] Stopping container $CID"
   docker stop $CID
 fi
}


function blast {
 stop_container_if_running $1
 remove_container_if_exists $1
 remove_image_if_exists $1
}

function build {
 stop_container_if_running $1
 remove_container_if_exists $1
# remove_image_if_exists $1
 echo "[$1] CMD -> docker build -q --rm -t $1 $2"
 docker build -q --rm -t $1 $2
}

function start {
  #If there is a running container, leave it
  if [ $( docker ps | grep $TAG_ROOT/$1 | wc -l ) -gt 0 ]; then
    echo "[$1] Already running. Exiting..."
    exit
  fi
  
  #If there is a stopped container, just start it
  if [ $( docker ps -a | grep $TAG_ROOT/$1 | wc -l ) -gt 0 ]; then
    echo "[$1] Stopped container found, just re-starting it"
    docker ps -a | grep $TAG_ROOT/$1 | awk '{print $1}' | xargs docker start
    exit
  fi
  
  if [ ! -f "$1/start" ]; then
    #If there is no start script
    PORTS=""
    PORTSTXT=""
    for PORT in `cat $1/Dockerfile  | grep EXPOSE | awk '{ print $2 }'`;do
      if [[ "${PORT}" == "${PORT%:*}" ]] ; then
        PORTS="$PORTS -p $PORT:$PORT"
      else
        PORTS="$PORTS -p $PORT"
      fi
      PORTSTXT="$PORTSTXT $PORT,"
    done

    if [ "x" == "x$PORTS" ]; then
      # No Port found
      echo "[$1] Starting new container"
      #docker run -h $TAG_ROOT/$1 --name $1 -d $TAG_ROOT/$1
      docker run -h $1 --name $1 -d $TAG_ROOT/$1
    else
      echo "[$1] Starting new container on port(s) $PORTSTXT"
      docker run $PORTS --hostname $1 --name $1 -d $TAG_ROOT/$1
# --net=host
    fi
  else
    #If there is a start script, just run it
    remove_container_if_exists $1
    echo "[$1] Starting new container using start script"
    ./$1/start
  fi
}

function stop {
 if [ $( docker ps | grep $TAG_ROOT/$1 | awk '{print $1}' | wc -l ) -gt 0 ]; then
  # Running container exists
  ID=`docker ps | grep $TAG_ROOT/$1 | awk '{print $1}'`
  echo "[$1] Stopping container"
  docker stop $ID
 fi
}

function tail_logs {
 if [ ! $( docker ps | grep $TAG_ROOT/$1 | awk '{print $1}' | wc -l ) -gt 0 ]; then
  echo "Unable to tail logs - no container is running for $TAG_ROOT/$1"
 fi
 ID=`docker ps | grep $TAG_ROOT/$1 | awk '{print $1}'`
 docker logs -f $ID
}



#if [ "$1" == "ui" ]; then
#  # https://github.com/crosbymichael/dockerui
#  docker run -d -p 9000:9000 --privileged --name docker-ui -v /var/run/docker.sock:/var/run/docker.sock dockerui/dockerui
#  nohup firefox http://localhost:9000 &
#  exit 0
#fi


sanity $2

case "$1" in
 
 iptables)
  echo "To provide container access to network, apply this change to the iptables"
  IPRANGE=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q -f name=$2) | sed 's/[0-9]*$/0\/16/g'`
  HOSTIP=`ifconfig em1 | awk '{ print $2}' | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
  echo "iptables -t nat -A POSTROUTING -s $IPRANGE -o eth0 -j SNAT --to $HOSTIP"
  echo "iptables -t nat -D POSTROUTING ????"
  exit 0

 ;;
 
 iprange)
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q -f name=$2) | sed 's/[0-9]*$/0\/16/g'
  exit 0
 ;;

 ip)
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q -f name=$2)
  exit 0
 ;;

 enter)
   CID=`docker ps | grep $2 | awk '{print $1}'`
   if [ "x" != "x$CID" ]; then
     sudo nsenter --target `docker inspect --format {{.State.Pid}} $CID` --mount --uts --ipc --net --pid
   else
     echo "[$2] Unable to find container id"
   fi
   exit 0
 ;;
 
 start)
  if [ "$2" == "registry" ]; then
    
    if [ $( docker ps -a | grep " registry " | wc -l ) -gt 0 ]; then
      echo "[$2] Stopped container found, just re-starting it"
      docker ps -a | grep " registry " | awk '{print $1}' | xargs docker start
    else
      docker run -d -p 5000:5000 -v /tmp/registry:/tmp/registry --name registry registry
      # TODO: Havent got this SSL PROXY working yet with jenkins calling to it
      #docker run -itd --link registry:registry -p 46022:443 -e AUTH_CREDENTIALS=admin:admin123 -e REGISTRY_PORT=5000 -v `pwd`/certs:/etc/nginx/ssl --name registry-ssl quay.io/aptible/registry-proxy
      #docker run -d -p 5000:5000 --name registry registry
    fi
    
    #if [ "$3" == "dev" ]; then
    #  docker run -d -p 5000:5000 --name registry-dev registry
    #elif [ "$3" == "prod" ]; then
    #  docker run -d -p 5001:5000 --name registry-prod registry
#    else
#      echo "Please supply a 3rd parameter specifying [dev|prod]"
#      exit 0
    #fi
  elif [ "$2" == "registry-ui" ]; then
    # https://registry.hub.docker.com/u/atcol/docker-registry-ui/
    stop_container_if_running registry-ui
    #remove_container_if_exists registry-ui
    #LINKS="--link registry-dev:registry-dev"
    #--link registry-dev:registry-dev --link registry-prod:registry-prod
    #-e REG2=http://localhost:5001/v1/
    #docker run -p 5002:8080 -d --name registry-ui --link registry:registry -e REG1=http://registry:5000/v1/ atcol/docker-registry-ui
    if [ $( docker ps | grep "$2" | wc -l ) -gt 0 ]; then
      echo "Already running, exiting"
      exit 0
    elif [ $( docker ps | grep " registry-ui " | wc -l ) -gt 0 ]; then
      echo "Stopped container found, just re-starting it"
      docker ps -a | grep " registry-ui " | awk '{print $1}' | xargs docker start
      exit 0
    else
      docker run -p 5002:8080 -d --name registry-ui --link registry:registry -e REG1=http://registry:5000/v1/ atcol/docker-registry-ui
    fi
    nohup firefox http://localhost:5002/repository/index &
  elif [ "$2" == "ui" ]; then
    # https://github.com/crosbymichael/dockerui
    docker ps -a | grep docker-ui | awk '{print$1}' | xargs docker rm
    docker run -d -p 5003:9000 --privileged --name docker-ui -v /var/run/docker.sock:/var/run/docker.sock dockerui/dockerui
    nohup firefox http://localhost:5003 &
  elif [ "$2" == "kanboard" ]; then
    docker ps -a | grep kanboard | awk '{print$1}' | xargs docker rm
    nohup docker run -p 9001:80 --name kanboard boomer/kanboard &
    nohup firefox http://localhost:9001/?controller=board &
  else
    start "$2"
  fi
  ;;
 
 stop)
  if [ "$2" == "registry" ]; then
    docker ps | grep registry | awk '{print $1}' | xargs docker stop
    #if [ "$3" == "dev" ] || [ "$3" == "prod" ]; then
    #  docker ps | grep registry-$3 | awk '{print $1}' | xargs docker stop
#    else
#      echo "Please supply a 3rd parameter specifying [dev|prod]"
#      exit 0
    #fi
  elif [ "$2" == "registry-ui" ]; then
    docker ps | grep registry-ui | awk '{print $1}' | xargs docker stop
  elif [ "$2" == "ui" ]; then
    docker ps | grep docker-ui | awk '{print $1}' | xargs docker stop
  elif [ "$2" == "kanboard" ]; then
    docker ps | grep kanboard | awk '{print $1}' | xargs docker stop
  else
    stop "$2"
  fi
  ;;
 
 blast)
  blast "$2"
  ;;
 
 build)
  #if [ "tomcat" == "$2" ] || [ "fuse" == "$2" ] || [ "firefox" == "$2" ] || [ "jenkins" == "$2" ] || [ "grafana-graphite-statsd" == "$2" ]; then
   build "$TAG_ROOT/$2" "$2"
  #else
  # echo "[$2] forbidden to build"
  #fi
  ;;
 
 tail)
  tail_logs $2
  ;;
 
 *)
  echo "usage: ./docker (build|start|stop|enter|ui|registry) <folder name containing Dockerfile>"
  exit 1
  ;;
esac

echo ""
echo "****** RUNNING CONTAINERS ******"
docker ps

#if [ "tomcat" == "$1" ] || [ "fuse" == "$1" ] || [ "firefox" == "$1" ] || [ "grafana-graphite-statsd" == "$1" ]; then
# build "$TAG" "$DIR"
#else
# echo "Either unknown image folder or it has not been vetted [$1]" 
#fi


